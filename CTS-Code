import random
import numpy as np
import matplotlib.pyplot as plt
from scipy.special import logit,expit
import time
import xlrd

StartTime = time.time()

#Extracting the data
def extractData(timeformat):
    
    loc = ("") #Insert location of the exel file here
    wb = xlrd.open_workbook(loc)
    sheet = wb.sheet_by_index(0)
    
    std_wranking = []
    std_name = []
    std_rating = []
    rapid_wranking = []
    rapid_name = []
    rapid_rating = []
    blitz_wranking = []
    blitz_name = []
    blitz_rating = []
    #takes the world ranking,name and rating of the choosen  timeformat
    if timeformat == "std":
        for i in range(sheet.nrows):
            std_wranking.append(sheet.cell_value(i, 0))
            std_name.append(sheet.cell_value(i, 1))
            std_rating.append(sheet.cell_value(i, 2))
        return std_wranking,std_name,std_rating
    
    elif timeformat == "rapid":
        for i in range(sheet.nrows):
            rapid_wranking.append(sheet.cell_value(i, 3))
            rapid_name.append(sheet.cell_value(i, 4))
            rapid_rating.append(sheet.cell_value(i, 5))
        return rapid_wranking,rapid_name,rapid_rating
    
    elif timeformat == "blitz":
        for i in range(sheet.nrows):
            blitz_wranking.append(sheet.cell_value(i, 6))
            blitz_name.append(sheet.cell_value(i, 7))
            blitz_rating.append(sheet.cell_value(i, 8))
        return blitz_wranking,blitz_name,blitz_rating
    
    else:
        print("Invalid Input")
        
#executing the function
wranking, name, rating = extractData("rapid")

dict1_all = dict(zip(name,rating))
dict2_all = dict(zip(wranking,name))
dict3_all = dict(zip(wranking,rating))

#Players participating in the tournament
participating_name = ["Carlsen","Vachier-Lagrave","Nakamura","Aronian","Nepomniachtchi","Dubov","Mamedyarov","Radjabov",
                 "So","Giri","Karjakin","Firouzja","Anton Guijarro","Grandelius","Van Foreest","Esipenko"]

def getrating(array): #Returns the rating of the participating players wheter or not the wranking or the names are given (in the same order)
    
    wranking_p = []
    name_p = []
    rating_p = []

    if type(array[0]) == int:
        wranking_p = array
        for i in range(len(wranking)):
            if wranking[i] in array:
                name_p.append(name[i])
                rating_p.append(rating[i])
            else:
                continue
        
        dict1_p = dict(zip(name_p,rating_p))
        dict2_p = dict(zip(wranking_p,name_p))
        dict3_p = dict(zip(wranking_p,rating_p))

    elif type(array[0]) == str:
        name_p = array
        for i in range(len(name)):
            if name[i] in array:
                wranking_p.append(wranking[i])
                rating_p.append(rating[i])
            else:
                continue
        
        dict1_p = dict(zip(name_p,rating_p))
        dict2_p = dict(zip(wranking_p,name_p))
        dict3_p = dict(zip(wranking_p,rating_p))
    
    else:
        print("Invalid Input")
        
    return rating_p, name_p ,dict1_p, dict2_p, dict3_p

rating_p, name_p, dict1_p, dict2_p, dict3_p = getrating(participating_name)

#Seed of participating players
name_rating = []
for i in range(16):
    name_rating.append([name_p[i],rating_p[i]])
    
sorted_name_rating = sorted(name_rating, key=lambda sl: -sl[1])

seed_name_rating = []
name_sorted = []
for i in range(16):
    name_sorted.append(sorted_name_rating[i][0])
    seed_name_rating.append([i,name_sorted[i],sorted_name_rating[i][1]])

seed = []
for i in range(16):
    seed.append(i)
    
name_sorted_seed = dict(zip(name_sorted,seed))

#Tournament

n = 1000
c = 1000
points =      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
number_of_w = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
number_of_d = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
number_of_l = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

player_w_d_l = [
    ["x",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,"x",0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,"x",0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,"x",0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,"x",0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,"x",0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,"x",0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,"x",0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,"x",0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,"x",0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,"x",0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,"x",0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,"x",0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,"x",0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,"x",0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"x"],
    ]

#returns the rapid rating of player a
def rating_of(a):
    return rating_p[a]

#returns expected score as a float between 0 and 1 of player a (vs player b)
def expected_score_a(a,b):  
    E_a = 1/(1+10**((rating_of(b)-rating_of(a))/400))
    return E_a

def prob_of_result(a,b):
    x = -1.627 + 0.0006955*rating_of(a) - 0.004668*abs(rating_of(a)-rating_of(b))
    P_draw = expit(x)
    P_win = expected_score_a(a,b) - P_draw/2
    P_loss = 1 - expected_score_a(a,b) - P_draw/2
    return P_win, P_draw, P_loss

def game_result(a,b): #game result of player a against player b
    #generate a random number, betweeen 0 and c (c=1000 to be more precise, program didnt like floats) decides the game result depending in which intervall the rn falls in
    #Also adds the scores and number of wins/draws/losses
    
    P_win, P_draw, P_loss = prob_of_result(a, b)
    intervall_win = list(range(0,int(round(P_win*c))))
    intervall_draw = list(range(int(round(P_win*c)),int(round((P_win+P_draw)*c))))
    r = round(random.uniform(0, c))
    if r in intervall_win:
        points[a] = points[a] + 1
        number_of_w[a] = number_of_w[a] + 1
        number_of_l[b] = number_of_l[b] + 1
        player_w_d_l[a][b] = 1
        player_w_d_l[b][a] = 0
    elif r in intervall_draw:
        points[a] = points[a] + 0.5
        points[b] = points[b] + 0.5
        number_of_d[a] = number_of_d[a] + 1
        number_of_d[b] = number_of_d[b] + 1
        player_w_d_l[a][b] = 0.5
        player_w_d_l[b][a] = 0.5
    else:
        points[b] = points[b] + 1
        number_of_l[a] = number_of_l[a] + 1
        number_of_w[b] = number_of_w[b] + 1
        player_w_d_l[a][b] = 0
        player_w_d_l[b][a] = 1
        
    return points, number_of_w, number_of_d, number_of_l
#named this function preliminaries because of my intent of doing a knockout phase after but this is the round robin part where every player playes everyone once
def preliminaries():
    for i in range(16):
        for j in range(i+1,16):
            points, number_of_w, number_of_d, number_of_l = game_result(i,j)

#"Analysis" of the results

totalrating = sum(rating)

def performance_rating(a):
    perf_rating = (totalrating - rating_of(a) + 400*(number_of_w[a] - number_of_l[a]))/15
    return round(perf_rating)

def tiebreak(a):
    player_a_beat = []
    player_a_drew = []
    points_of_the_players_that_player_a_beat = []
    points_of_the_players_that_player_a_drew = []
    
    for i in range(16):
        if player_w_d_l[a][i] == 1:
            player_a_beat.append(i)
            points_of_the_players_that_player_a_beat.append(points[i])
        elif player_w_d_l[a][i] == 0.5:
            player_a_drew.append(i)
            points_of_the_players_that_player_a_drew.append(points[i])
        else:
            continue

    tb = sum(points_of_the_players_that_player_a_beat) + 0.5*sum(points_of_the_players_that_player_a_drew)
    
    return  tb

#Variables to be calculated after preliminaries
tiebreaks = []
perf_ratings = []
name_points_tiebreaks = []
rating_diff = []
standings = []

points_n = []
number_of_w_n = []
number_of_d_n = []
number_of_l_n = []
player_w_d_l_n = []
tiebreaks_n = []
perf_ratings_n = []
name_points_tiebreaks_n = []
standings_n = []
winner_n = []

#repeating the tournament
for i in range(n):
    
    preliminaries()
    
    points_n.append(points)
    number_of_w.append(number_of_w)
    number_of_d.append(number_of_d)
    player_w_d_l_n.append(player_w_d_l)
    
    for j in range(len(participating_name)):
        tiebreaks.append(tiebreak(j))
        perf_ratings.append(performance_rating(j))
        name_points_tiebreaks.append([name_p[j],points[j],tiebreaks[j]])
    
    standings.append(sorted(name_points_tiebreaks,key=lambda sl: (-sl[1],-sl[2])))
    winner = standings[0][0][0]
    
    winner_n.append(winner)
    standings_n.append(standings)
    tiebreaks_n.append(tiebreaks)
    perf_ratings_n.append(perf_ratings)
    name_points_tiebreaks_n.append(name_points_tiebreaks)
    
    #Reset variables
    points =      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    number_of_w = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    number_of_d = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    number_of_l = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    standings = []

amounts_of_w = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
for i in range(16):
    amounts_of_w[i] = winner_n.count(name_sorted[i])
    
print(name_sorted)
print(amounts_of_w)



print("\n")
print("Running time = {0} seconds ".format(time.time() - StartTime))
